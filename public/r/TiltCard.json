{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TiltCard",
  "type": "registry:component",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "components/ui/TiltCard/tiltcard.tsx",
      "content": "'use client'\r\n\r\nimport { ReactNode } from \"react\";\r\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\r\nimport { cn } from \"@/lib/utils\";\r\nexport interface TiltCardProps {\r\n  title: string;\r\n  description?: string;\r\n  imageUrl?: string;\r\n  className?: string;\r\n  imgClassName?: string;\r\n  children?: ReactNode;\r\n}\r\n\r\nexport const TiltCard = ({ \r\n  title, \r\n  description, \r\n  imageUrl,\r\n  className, \r\n  imgClassName,\r\n  children \r\n}: TiltCardProps) => {\r\n  // Create motion values with default position at the center (0.5)\r\n  const x = useMotionValue(0.5);\r\n  const y = useMotionValue(0.5);\r\n  \r\n  // Transform x and y values to proper rotation angles\r\n  // Note: Reversed the ranges to make the tilt follow the mouse naturally\r\n  const rotateX = useTransform(y, [0, 1], [10, -10]);\r\n  const rotateY = useTransform(x, [0, 1], [-10, 10]);\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    const rect = e.currentTarget.getBoundingClientRect();\r\n    \r\n    // Calculate the normalized position of the mouse over the card (0 to 1)\r\n    const offsetX = (e.clientX - rect.left) / rect.width;\r\n    const offsetY = (e.clientY - rect.top) / rect.height;\r\n    \r\n    // Update motion values\r\n    x.set(offsetX);\r\n    y.set(offsetY);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    // Reset to center position when mouse leaves\r\n    x.set(0.5);\r\n    y.set(0.5);\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      onMouseMove={handleMouseMove}\r\n      onMouseLeave={handleMouseLeave}\r\n      style={{\r\n        rotateX,\r\n        rotateY,\r\n        transformStyle: \"preserve-3d\",\r\n        transformOrigin: \"center center\",\r\n        perspective: \"1000px\"\r\n      }}\r\n      whileHover={{ scale: 1.02 }}\r\n      transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\r\n      className={cn(\r\n        \"bg-gradient-to-br from-[#0f2027] via-[#203a43] to-[#2c5364]\",\r\n        \"rounded-2xl shadow-xl p-4 sm:p-5 md:p-6 text-white\",\r\n        \"w-full max-w-xs md:max-w-sm\",\r\n        \"hover:shadow-[0_30px_60px_-10px_rgba(59,130,246,0.5)] border border-white/10\",\r\n        imageUrl ? \"h-auto\" : \"h-64\",\r\n        className\r\n      )}\r\n    >\r\n      <div \r\n        className=\"relative z-10 flex flex-col justify-between h-full pointer-events-none\"\r\n        style={{ transform: \"translateZ(80px)\" }}\r\n      >\r\n        {imageUrl && (\r\n          <div \r\n            className=\"mb-3 sm:mb-4 overflow-hidden rounded-lg shadow-md\"\r\n            style={{ transform: \"translateZ(15px)\" }}\r\n          >\r\n            <img\r\n              src={imageUrl}\r\n              alt={title}\r\n              className={cn(\r\n                \"w-full aspect-video object-cover rounded-lg\", \r\n                imgClassName\r\n              )}\r\n            />\r\n          </div>\r\n        )}\r\n        \r\n        <div>\r\n          <h3 \r\n            className=\"text-lg sm:text-xl font-semibold mb-1 sm:mb-2 drop-shadow-md\"\r\n            style={{ transform: \"translateZ(10px)\" }}\r\n          >\r\n            {title}\r\n          </h3>\r\n          {description && (\r\n            <p \r\n              className=\"text-xs sm:text-sm text-zinc-300\"\r\n              style={{ transform: \"translateZ(5px)\" }}\r\n            >\r\n              {description}\r\n            </p>\r\n          )}\r\n        </div>\r\n        \r\n        {children && <div className=\"mt-3 sm:mt-4\">{children}</div>}\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};",
      "type": "registry:component",
      "target": "components/TiltCard/tiltcard.tsx"
    }
  ]
}